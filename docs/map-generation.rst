=====================
Random Map Generation
=====================

The random map generation is quite simple but CPU-intensive. The whole process
is really simple but, to get 'realistic' results, it is needed to do a lot of
data processing, which takes a few seconds to complete.

The code is located in:

- ``includes/room/gen_map/gen_map_circle.inc`` : Look up tables with shapes of
  quarter of circles of different radiuses.

- ``source/room/gen_map/gen_map.asm`` : File that contains the map generation
  code.

To avoid unnecessary copies between generation steps between WRAMX banks, all
steps are hardcoded to use two WRAMX banks, using one of them as source and the
other one as destination, changing the direction after each step. The final
result is stored in one of them and a minimap is generated by using the APA
(All Pixel Addressable) drawing functions.

This code uses a special random number generator instead of the one that the
rest of the game uses. It's a Xorshift random number generator based on the code
found `here <https://en.wikipedia.org/wiki/Xorshift>`_. This generator generates
reasonably good random numbers but the most important thing is that the
resulting sequence of numbers is always the same one for a given seed, unlike
the random number generator used by the rest of the game. This way, if the
player likes a specific map, the seed used to generate it can be used again and
it will generate the same map. The two functions are ``gen_map_srand`` and
``gen_map_rand``.

In short, the algorithm generates a map with random elevations, smooths it and
adds a lot of circles of different radiuses and elevations. Then, the map is
normalized so that the average elevation is 0. The result is smoothed again and
every tile is converted to water, field or forest depending on 2 elevation
thresholds. Not every possible tile placement can be drawn with the tilemap, so
the last step in the map generation is an iterative process that tries to
determine whether all the tiles in the map can be represented with the available
tilemap. If any of them can't be represented, the map is modified and the
process starts again. This is done until all the tiles in the map can be drawn
with the current tileset. Once this is done, the APA functions are used to
generate a minimap.

After generating the map and showing the minimap to the player, it can be
accepted or rejected. If it is accepted, the information stored in the last
temporary WRAMX bank is used to fill to the WRAMX banks where tiles and
attributes are stored (instead of loading them from SRAM or from a predefined
map stored in ROM, for example).

Note: The file ``tools/mapgen/mapgen.c`` has a C implementation of this
algorithm. This was used to test the map generation code before actually writing
any assembly code in order not to waste more time than necessary, since it
wasn't that easy to come up with a not-too-CPU-intensive way of generating
more-or-less realistic maps.

Input data
==========

The main input is the random seed used to generate the map. There's another
input, which is the water level. This value is used to calculate the thresholds
to convert each tile into water, field or forest.

Algorithm
=========

Located in ``map_generate``.

This function receives a random seed and an elevation offset which is used to
calculate elevation thresholds that are used to determine the elevation levels
at which water, fields and forest are found. The way it works is explained
below. Most steps get data from one WRAMX bank and write the result to the other
one. The names used are ``BANK_TEMP1`` and ``BANK_TEMP2``.

- ``map_initialize``: Initialize all tiles of the map to random variables.

- ``map_smooth_1_to_2``: Get data from the first temporary bank, smooth it and
  save it into bank 2. The formula used for each tile is:

      ``R = ( Center + (Left + Right + Up + Down)/4 ) / 2``

  For tiles in the border of the map, instead of reading from a nonexistent tile
  outside the map, the value of the central tile is used instead.

- ``map_add_circle_all``: Add circles to the map. The list of circles added is
  located in the array ``.circle_radius_array`` local to ``map_add_circle_all``.
  The first circle is added to the map, with a value of ``STEP_INCREMENT``. The
  second one is subtracted by that same value. The third one is added again, and
  so on until the end of the list. This function works on data on the second
  bank.

- ``map_normalize``: Calculate average value of the elevations of the map and
  subtract that value from all tiles. 128 is also added to them, so the average
  value is actually 128. This function works on data on the second bank.

- ``map_smooth_2_to_1`` and ``map_smooth_1_to_2``. Perform to smoothing steps,
  going from bank 2 to bank 1 first and then going back to bank 2.

- ``map_apply_height_threshold``: Using thresholds calculated at the beginning
  of the functions, convert data in bank 2 to pure water, field and forest
  tiles. Output is bank 2.

- ``map_tilemap_fix``: This function makes sure that the distribution of tiles
  results in a valid map that can be represented by the current tileset. This
  function smooths the edges of the interfaces between different zones. This is
  actually an iterative function that will check if a specific tile can be
  converted to a valid tileset tile and, if not, it is changed. It will loop
  until the first iteration that doesn't change any tile, which means that all
  tiles are valid. This is first done for water/field interfaces and then for
  field/forest because by fixing the water/field interface there will be less
  problems for the field/forest one, and there's usually less forest area so
  it's better to try to preserve it as much as possible. This function works on
  bank 2 data.

- ``map_draw``: This function reads data from bank 2 and calls the APA functions
  to generate a minimap.

If the player selects this map, ``map_tilemap_to_real_tiles`` is called:

- The data in bank 2 is copied to ``BANK_CITY_MAP_TILES``.

- Tiles are converted to their smoothed versions by calling
  ``fix_water_border_tiles`` and ``fix_forest_border_tiles``. There is no way
  this can fail because ``map_tilemap_fix`` made sure that every tile in the map
  had a correct translation.

- Some random plain tiles are converted to the alternate version of themselves,
  like ``T_GRASS`` to ``T_GRASS_EXTRA``.

- Finally, ``BANK_CITY_MAP_ATTRS`` is filled. It is only needed to set the
  palette of the tiles, they are all placed in the first 256 tile group so they
  are always in VRAM bank 0.

Output Data
===========

The map calculated during the first part is saved to ``BANK_TEMP2`` and the
minimap is saved to ``MINIMAP_BACKBUFFER_WRAMX_BANK``. The final map is saved to
``BANK_CITY_MAP_TILES`` and ``BANK_CITY_MAP_ATTRS`` so that the game can use
this data right away.
